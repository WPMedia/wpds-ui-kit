import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as _stitches_react_types_config from '@stitches/react/types/config';
import * as React from 'react';
import * as WPDS from '@washingtonpost/wpds-theme';
import * as SelectPrimitive from '@radix-ui/react-select';
import * as _washingtonpost_wpds_input_label from '@washingtonpost/wpds-input-label';

declare const DividerContainer: _stitches_react_types_styled_component.StyledComponent<"div", {
    none?: boolean | "true" | undefined;
}, {
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, _stitches_react_types_css_util.CSS<{
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        primary: string;
        secondary: string;
        cta: string;
        disabled: string;
        accessible: string;
        subtle: string;
        faint: string;
        error: string;
        success: string;
        warning: string;
        signal: string;
        onPrimary: string;
        onSecondary: string;
        onCta: string;
        onDisabled: string;
        onMessage: string;
        "alpha25-static": string;
        "alpha50-static": string;
        "gray0-static": string;
        "gray20-static": string;
        "gray40-static": string;
        "gray60-static": string;
        "gray80-static": string;
        "gray100-static": string;
        "gray200-static": string;
        "gray300-static": string;
        "gray400-static": string;
        "gray500-static": string;
        "gray600-static": string;
        "gray700-static": string;
        "blue40-static": string;
        "blue60-static": string;
        "blue80-static": string;
        "blue100-static": string;
        "blue200-static": string;
        "blue300-static": string;
        "blue400-static": string;
        "blue500-static": string;
        "blue600-static": string;
        "red40-static": string;
        "red60-static": string;
        "red80-static": string;
        "red100-static": string;
        "red200-static": string;
        "red300-static": string;
        "red400-static": string;
        "red500-static": string;
        "red600-static": string;
        "pink40-static": string;
        "pink60-static": string;
        "pink80-static": string;
        "pink100-static": string;
        "pink200-static": string;
        "pink300-static": string;
        "pink400-static": string;
        "pink500-static": string;
        "pink600-static": string;
        "purple40-static": string;
        "purple60-static": string;
        "purple80-static": string;
        "purple100-static": string;
        "purple200-static": string;
        "purple300-static": string;
        "purple400-static": string;
        "purple500-static": string;
        "purple600-static": string;
        "teal40-static": string;
        "teal60-static": string;
        "teal80-static": string;
        "teal100-static": string;
        "teal200-static": string;
        "teal300-static": string;
        "teal400-static": string;
        "teal500-static": string;
        "teal600-static": string;
        "orange40-static": string;
        "orange60-static": string;
        "orange80-static": string;
        "orange100-static": string;
        "orange200-static": string;
        "orange300-static": string;
        "orange400-static": string;
        "orange500-static": string;
        "orange600-static": string;
        "green40-static": string;
        "green60-static": string;
        "green80-static": string;
        "green100-static": string;
        "green200-static": string;
        "green300-static": string;
        "green400-static": string;
        "green500-static": string;
        "green600-static": string;
        "gold40-static": string;
        "gold60-static": string;
        "gold80-static": string;
        "gold100-static": string;
        "gold200-static": string;
        "gold300-static": string;
        "gold400-static": string;
        "gold500-static": string;
        "gold600-static": string;
        "yellow100-static": string;
        "yellow600-static": string;
        "mustard40-static": string;
        "mustard60-static": string;
        "mustard80-static": string;
        "mustard100-static": string;
        "mustard200-static": string;
        "mustard300-static": string;
        "mustard400-static": string;
        "mustard500-static": string;
        "mustard600-static": string;
        alpha25: string;
        alpha50: string;
        gray0: string;
        gray20: string;
        gray40: string;
        gray60: string;
        gray80: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        blue40: string;
        blue60: string;
        blue80: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        red40: string;
        red60: string;
        red80: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        pink40: string;
        pink60: string;
        pink80: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        purple40: string;
        purple60: string;
        purple80: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        teal40: string;
        teal60: string;
        teal80: string;
        teal100: string;
        teal200: string;
        teal300: string;
        teal400: string;
        teal500: string;
        teal600: string;
        orange40: string;
        orange60: string;
        orange80: string;
        orange100: string;
        orange200: string;
        orange300: string;
        orange400: string;
        orange500: string;
        orange600: string;
        green40: string;
        green60: string;
        green80: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        gold40: string;
        gold60: string;
        gold80: string;
        gold100: string;
        gold200: string;
        gold300: string;
        gold400: string;
        gold500: string;
        gold600: string;
        yellow100: string;
        yellow600: string;
        mustard40: string;
        mustard60: string;
        mustard80: string;
        mustard100: string;
        mustard200: string;
        mustard300: string;
        mustard400: string;
        mustard500: string;
        mustard600: string;
    };
    sizes: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
        "087": string;
    };
    space: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
    };
    radii: {
        "100": string;
        "125": string;
        "150": string;
        "012": string;
        "025": string;
        "050": string;
        "075": string;
        round: string;
    };
    fonts: {
        headline: string;
        subhead: string;
        body: string;
        meta: string;
        magazine: string;
    };
    fontSizes: {
        "100": string;
        "112": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "075": string;
        "087": string;
    };
    fontWeights: {
        light: number;
        regular: number;
        bold: number;
        ultra: number;
    };
    shadows: {
        "50": string;
        "100": string;
        "200": string;
        "300": string;
        "400": string;
        "500": string;
    };
    zIndices: {
        offer: number;
        shell: number;
        ads: number;
        page: number;
    };
    lineHeights: {
        headline: string;
        body: string;
        meta: string;
        subhead: string;
        "100": number;
        "110": number;
        "125": number;
        "150": number;
        "160": number;
        "175": number;
        "200": number;
        "240": number;
    };
    transitions: {
        allFast: string;
        fast: string;
        normal: string;
        inOut: string;
    };
    borderStyles: unknown;
    borderWidths: unknown;
    letterSpacings: unknown;
}, _stitches_react_types_config.DefaultThemeMap, {
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {};
        paddingRight: {};
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {};
        paddingBottom: {};
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {};
        marginBottom: {};
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {};
        marginRight: {};
    };
    size: (value: {
        readonly [$$PropertyValue]: "height" | "width";
    }) => {
        width: {};
        height: {};
    };
}>>;
declare type SelectGroupProps = {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS;
    /** The value of the select when initially rendered. Use when you do not need to control the state of the select. */
    label?: string;
} & React.ComponentPropsWithRef<typeof DividerContainer>;
declare const SelectGroup: React.ForwardRefExoticComponent<Pick<SelectGroupProps, "none" | "label" | "key" | keyof React.HTMLAttributes<HTMLDivElement> | "css"> & React.RefAttributes<HTMLDivElement>>;

declare const StyledItem: _stitches_react_types_styled_component.StyledComponent<React.ForwardRefExoticComponent<SelectPrimitive.SelectItemProps & React.RefAttributes<HTMLDivElement>>, {}, {
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, _stitches_react_types_css_util.CSS<{
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        primary: string;
        secondary: string;
        cta: string;
        disabled: string;
        accessible: string;
        subtle: string;
        faint: string;
        error: string;
        success: string;
        warning: string;
        signal: string;
        onPrimary: string;
        onSecondary: string;
        onCta: string;
        onDisabled: string;
        onMessage: string;
        "alpha25-static": string;
        "alpha50-static": string;
        "gray0-static": string;
        "gray20-static": string;
        "gray40-static": string;
        "gray60-static": string;
        "gray80-static": string;
        "gray100-static": string;
        "gray200-static": string;
        "gray300-static": string;
        "gray400-static": string;
        "gray500-static": string;
        "gray600-static": string;
        "gray700-static": string;
        "blue40-static": string;
        "blue60-static": string;
        "blue80-static": string;
        "blue100-static": string;
        "blue200-static": string;
        "blue300-static": string;
        "blue400-static": string;
        "blue500-static": string;
        "blue600-static": string;
        "red40-static": string;
        "red60-static": string;
        "red80-static": string;
        "red100-static": string;
        "red200-static": string;
        "red300-static": string;
        "red400-static": string;
        "red500-static": string;
        "red600-static": string;
        "pink40-static": string;
        "pink60-static": string;
        "pink80-static": string;
        "pink100-static": string;
        "pink200-static": string;
        "pink300-static": string;
        "pink400-static": string;
        "pink500-static": string;
        "pink600-static": string;
        "purple40-static": string;
        "purple60-static": string;
        "purple80-static": string;
        "purple100-static": string;
        "purple200-static": string;
        "purple300-static": string;
        "purple400-static": string;
        "purple500-static": string;
        "purple600-static": string;
        "teal40-static": string;
        "teal60-static": string;
        "teal80-static": string;
        "teal100-static": string;
        "teal200-static": string;
        "teal300-static": string;
        "teal400-static": string;
        "teal500-static": string;
        "teal600-static": string;
        "orange40-static": string;
        "orange60-static": string;
        "orange80-static": string;
        "orange100-static": string;
        "orange200-static": string;
        "orange300-static": string;
        "orange400-static": string;
        "orange500-static": string;
        "orange600-static": string;
        "green40-static": string;
        "green60-static": string;
        "green80-static": string;
        "green100-static": string;
        "green200-static": string;
        "green300-static": string;
        "green400-static": string;
        "green500-static": string;
        "green600-static": string;
        "gold40-static": string;
        "gold60-static": string;
        "gold80-static": string;
        "gold100-static": string;
        "gold200-static": string;
        "gold300-static": string;
        "gold400-static": string;
        "gold500-static": string;
        "gold600-static": string;
        "yellow100-static": string;
        "yellow600-static": string;
        "mustard40-static": string;
        "mustard60-static": string;
        "mustard80-static": string;
        "mustard100-static": string;
        "mustard200-static": string;
        "mustard300-static": string;
        "mustard400-static": string;
        "mustard500-static": string;
        "mustard600-static": string;
        alpha25: string;
        alpha50: string;
        gray0: string;
        gray20: string;
        gray40: string;
        gray60: string;
        gray80: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        blue40: string;
        blue60: string;
        blue80: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        red40: string;
        red60: string;
        red80: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        pink40: string;
        pink60: string;
        pink80: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        purple40: string;
        purple60: string;
        purple80: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        teal40: string;
        teal60: string;
        teal80: string;
        teal100: string;
        teal200: string;
        teal300: string;
        teal400: string;
        teal500: string;
        teal600: string;
        orange40: string;
        orange60: string;
        orange80: string;
        orange100: string;
        orange200: string;
        orange300: string;
        orange400: string;
        orange500: string;
        orange600: string;
        green40: string;
        green60: string;
        green80: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        gold40: string;
        gold60: string;
        gold80: string;
        gold100: string;
        gold200: string;
        gold300: string;
        gold400: string;
        gold500: string;
        gold600: string;
        yellow100: string;
        yellow600: string;
        mustard40: string;
        mustard60: string;
        mustard80: string;
        mustard100: string;
        mustard200: string;
        mustard300: string;
        mustard400: string;
        mustard500: string;
        mustard600: string;
    };
    sizes: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
        "087": string;
    };
    space: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
    };
    radii: {
        "100": string;
        "125": string;
        "150": string;
        "012": string;
        "025": string;
        "050": string;
        "075": string;
        round: string;
    };
    fonts: {
        headline: string;
        subhead: string;
        body: string;
        meta: string;
        magazine: string;
    };
    fontSizes: {
        "100": string;
        "112": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "075": string;
        "087": string;
    };
    fontWeights: {
        light: number;
        regular: number;
        bold: number;
        ultra: number;
    };
    shadows: {
        "50": string;
        "100": string;
        "200": string;
        "300": string;
        "400": string;
        "500": string;
    };
    zIndices: {
        offer: number;
        shell: number;
        ads: number;
        page: number;
    };
    lineHeights: {
        headline: string;
        body: string;
        meta: string;
        subhead: string;
        "100": number;
        "110": number;
        "125": number;
        "150": number;
        "160": number;
        "175": number;
        "200": number;
        "240": number;
    };
    transitions: {
        allFast: string;
        fast: string;
        normal: string;
        inOut: string;
    };
    borderStyles: unknown;
    borderWidths: unknown;
    letterSpacings: unknown;
}, _stitches_react_types_config.DefaultThemeMap, {
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {};
        paddingRight: {};
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {};
        paddingBottom: {};
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {};
        marginBottom: {};
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {};
        marginRight: {};
    };
    size: (value: {
        readonly [$$PropertyValue]: "height" | "width";
    }) => {
        width: {};
        height: {};
    };
}>>;
declare type SelectItemProps = {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS;
    /** The value associated with this item */
    value: string;
} & React.ComponentPropsWithRef<typeof StyledItem>;
declare const SelectItem: React.ForwardRefExoticComponent<Pick<SelectItemProps, "color" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "asChild" | "disabled" | "css" | "value" | "textValue"> & React.RefAttributes<HTMLDivElement>>;

declare const StyledContent: _stitches_react_types_styled_component.StyledComponent<React.ForwardRefExoticComponent<SelectPrimitive.SelectContentProps & React.RefAttributes<HTMLDivElement>>, {}, {
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, _stitches_react_types_css_util.CSS<{
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        primary: string;
        secondary: string;
        cta: string;
        disabled: string;
        accessible: string;
        subtle: string;
        faint: string;
        error: string;
        success: string;
        warning: string;
        signal: string;
        onPrimary: string;
        onSecondary: string;
        onCta: string;
        onDisabled: string;
        onMessage: string;
        "alpha25-static": string;
        "alpha50-static": string;
        "gray0-static": string;
        "gray20-static": string;
        "gray40-static": string;
        "gray60-static": string;
        "gray80-static": string;
        "gray100-static": string;
        "gray200-static": string;
        "gray300-static": string;
        "gray400-static": string;
        "gray500-static": string;
        "gray600-static": string;
        "gray700-static": string;
        "blue40-static": string;
        "blue60-static": string;
        "blue80-static": string;
        "blue100-static": string;
        "blue200-static": string;
        "blue300-static": string;
        "blue400-static": string;
        "blue500-static": string;
        "blue600-static": string;
        "red40-static": string;
        "red60-static": string;
        "red80-static": string;
        "red100-static": string;
        "red200-static": string;
        "red300-static": string;
        "red400-static": string;
        "red500-static": string;
        "red600-static": string;
        "pink40-static": string;
        "pink60-static": string;
        "pink80-static": string;
        "pink100-static": string;
        "pink200-static": string;
        "pink300-static": string;
        "pink400-static": string;
        "pink500-static": string;
        "pink600-static": string;
        "purple40-static": string;
        "purple60-static": string;
        "purple80-static": string;
        "purple100-static": string;
        "purple200-static": string;
        "purple300-static": string;
        "purple400-static": string;
        "purple500-static": string;
        "purple600-static": string;
        "teal40-static": string;
        "teal60-static": string;
        "teal80-static": string;
        "teal100-static": string;
        "teal200-static": string;
        "teal300-static": string;
        "teal400-static": string;
        "teal500-static": string;
        "teal600-static": string;
        "orange40-static": string;
        "orange60-static": string;
        "orange80-static": string;
        "orange100-static": string;
        "orange200-static": string;
        "orange300-static": string;
        "orange400-static": string;
        "orange500-static": string;
        "orange600-static": string;
        "green40-static": string;
        "green60-static": string;
        "green80-static": string;
        "green100-static": string;
        "green200-static": string;
        "green300-static": string;
        "green400-static": string;
        "green500-static": string;
        "green600-static": string;
        "gold40-static": string;
        "gold60-static": string;
        "gold80-static": string;
        "gold100-static": string;
        "gold200-static": string;
        "gold300-static": string;
        "gold400-static": string;
        "gold500-static": string;
        "gold600-static": string;
        "yellow100-static": string;
        "yellow600-static": string;
        "mustard40-static": string;
        "mustard60-static": string;
        "mustard80-static": string;
        "mustard100-static": string;
        "mustard200-static": string;
        "mustard300-static": string;
        "mustard400-static": string;
        "mustard500-static": string;
        "mustard600-static": string;
        alpha25: string;
        alpha50: string;
        gray0: string;
        gray20: string;
        gray40: string;
        gray60: string;
        gray80: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        blue40: string;
        blue60: string;
        blue80: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        red40: string;
        red60: string;
        red80: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        pink40: string;
        pink60: string;
        pink80: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        purple40: string;
        purple60: string;
        purple80: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        teal40: string;
        teal60: string;
        teal80: string;
        teal100: string;
        teal200: string;
        teal300: string;
        teal400: string;
        teal500: string;
        teal600: string;
        orange40: string;
        orange60: string;
        orange80: string;
        orange100: string;
        orange200: string;
        orange300: string;
        orange400: string;
        orange500: string;
        orange600: string;
        green40: string;
        green60: string;
        green80: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        gold40: string;
        gold60: string;
        gold80: string;
        gold100: string;
        gold200: string;
        gold300: string;
        gold400: string;
        gold500: string;
        gold600: string;
        yellow100: string;
        yellow600: string;
        mustard40: string;
        mustard60: string;
        mustard80: string;
        mustard100: string;
        mustard200: string;
        mustard300: string;
        mustard400: string;
        mustard500: string;
        mustard600: string;
    };
    sizes: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
        "087": string;
    };
    space: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
    };
    radii: {
        "100": string;
        "125": string;
        "150": string;
        "012": string;
        "025": string;
        "050": string;
        "075": string;
        round: string;
    };
    fonts: {
        headline: string;
        subhead: string;
        body: string;
        meta: string;
        magazine: string;
    };
    fontSizes: {
        "100": string;
        "112": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "075": string;
        "087": string;
    };
    fontWeights: {
        light: number;
        regular: number;
        bold: number;
        ultra: number;
    };
    shadows: {
        "50": string;
        "100": string;
        "200": string;
        "300": string;
        "400": string;
        "500": string;
    };
    zIndices: {
        offer: number;
        shell: number;
        ads: number;
        page: number;
    };
    lineHeights: {
        headline: string;
        body: string;
        meta: string;
        subhead: string;
        "100": number;
        "110": number;
        "125": number;
        "150": number;
        "160": number;
        "175": number;
        "200": number;
        "240": number;
    };
    transitions: {
        allFast: string;
        fast: string;
        normal: string;
        inOut: string;
    };
    borderStyles: unknown;
    borderWidths: unknown;
    letterSpacings: unknown;
}, _stitches_react_types_config.DefaultThemeMap, {
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {};
        paddingRight: {};
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {};
        paddingBottom: {};
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {};
        marginBottom: {};
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {};
        marginRight: {};
    };
    size: (value: {
        readonly [$$PropertyValue]: "height" | "width";
    }) => {
        width: {};
        height: {};
    };
}>>;
declare type SelectContentProps = {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS;
} & React.ComponentPropsWithRef<typeof StyledContent>;
declare const SelectContent: React.ForwardRefExoticComponent<Pick<SelectContentProps, "color" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "asChild" | "side" | "sideOffset" | "align" | "alignOffset" | "arrowPadding" | "collisionBoundary" | "collisionPadding" | "sticky" | "hideWhenDetached" | "avoidCollisions" | "position" | "onCloseAutoFocus" | "onEscapeKeyDown" | "onPointerDownOutside" | "css"> & React.RefAttributes<HTMLDivElement>>;

declare type SelectContextProps = {
    currentValue: string;
    required: boolean | undefined;
    success: boolean | undefined;
    disabled: boolean | undefined;
    error?: boolean;
    errorMessage?: React.ReactNode;
    helperText?: React.ReactNode;
    isFloating: boolean;
    setIsFloating: (boolean: boolean) => void;
    contentWidth: number;
    setContentWidth: (number: number) => void;
};
declare const SelectContext: React.Context<SelectContextProps>;
declare type SelectRootVariants = WPDS.VariantProps<typeof SelectPrimitive.Root>;
declare type SelectRootProps = {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS;
    /** The underlying input element disabled attribute */
    disabled?: boolean;
    /** Indicates there is an error */
    error?: boolean;
    /** Text displayed below the select to describe the cause of the error */
    errorMessage?: React.ReactNode;
    /** Text displayed below the input to provide additional context */
    helperText?: React.ReactNode;
    /** Event handler called when the value changes. */
    onValueChange?: ((value: string) => void) | (((state: string) => void) | undefined);
    /** The select element's required attribute */
    required?: boolean;
    /** Indicates there is a success*/
    success?: boolean;
    /** The controlled value of the select. Should be used in conjunction with onValueChange */
    value?: string;
    /** The value of the select when initially rendered. Use when you do not need to control the state of the select. */
    defaultValue?: string;
    /** force overlay open */
    open?: boolean;
} & SelectRootVariants;
declare const SelectRoot: {
    ({ children, required, success, disabled, value: valueProp, onValueChange, error, errorMessage, helperText, defaultValue, ...props }: SelectRootProps): JSX.Element;
    displayName: string;
};
declare const Select: {
    Root: {
        ({ children, required, success, disabled, value: valueProp, onValueChange, error, errorMessage, helperText, defaultValue, ...props }: SelectRootProps): JSX.Element;
        displayName: string;
    };
    Content: React.ForwardRefExoticComponent<Pick<SelectContentProps, "color" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "asChild" | "side" | "sideOffset" | "align" | "alignOffset" | "arrowPadding" | "collisionBoundary" | "collisionPadding" | "sticky" | "hideWhenDetached" | "avoidCollisions" | "position" | "onCloseAutoFocus" | "onEscapeKeyDown" | "onPointerDownOutside" | "css"> & React.RefAttributes<HTMLDivElement>>;
    Item: React.ForwardRefExoticComponent<Pick<SelectItemProps, "color" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "asChild" | "disabled" | "css" | "value" | "textValue"> & React.RefAttributes<HTMLDivElement>>;
    Group: React.ForwardRefExoticComponent<Pick<SelectGroupProps, "none" | "label" | "key" | keyof React.HTMLAttributes<HTMLDivElement> | "css"> & React.RefAttributes<HTMLDivElement>>;
    Trigger: React.ForwardRefExoticComponent<SelectPrimitive.SelectTriggerProps & _stitches_react_types_styled_component.TransformProps<{
        success?: boolean | "true" | undefined;
        error?: boolean | "true" | undefined;
        isInvalid?: boolean | "true" | undefined;
        isDisabled?: boolean | "true" | undefined;
    }, {
        sm: `(max-width: calc(${string}))`;
        md: `(min-width: ${string}) and (max-width: calc(${string}))`;
        lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
        xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
        xxl: `(min-width: ${string}) and (max-width: ${string})`;
        notSm: `(min-width: calc(${string} + 1px))`;
        notMd: `(min-width: calc(${string} + 1px))`;
        notLg: `(min-width: calc(${string} + 1px))`;
        notXl: `(min-width: calc(${string} + 1px))`;
        notXxl: `(min-width: calc(${string} + 1px ))`;
        minSm: `(min-width: calc(${string} + 1px))`;
        minMd: `(min-width: calc(${string} + 1px))`;
        minLg: `(min-width: calc(${string} + 1px))`;
        minXl: `(min-width: calc(${string} + 1px))`;
        minXxl: `(min-width: calc(${string} + 1px ))`;
        maxSm: `(max-width: calc(${string} - 1px))`;
        maxMd: `(max-width: calc(${string} - 1px))`;
        maxLg: `(max-width: calc(${string} - 1px))`;
        maxXl: `(max-width: calc(${string} - 1px))`;
        maxXxl: `(max-width: ${string})`;
        reducedMotion: "(prefers-reduced-motion)";
        hover: "(any-hover: hover)";
        dark: "(prefers-color-scheme: dark)";
        light: "(prefers-color-scheme: light)";
    }> & {
        children?: React.ReactNode;
        css?: WPDS.CSS | undefined;
    } & React.RefAttributes<HTMLButtonElement>>;
    Label: {
        ({ children, ...props }: _stitches_react_types_styled_component.TransformProps<{
            isFloating?: boolean | "true" | undefined;
            isDisabled?: boolean | "true" | undefined;
        }, {
            sm: `(max-width: calc(${string}))`;
            md: `(min-width: ${string}) and (max-width: calc(${string}))`;
            lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
            xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
            xxl: `(min-width: ${string}) and (max-width: ${string})`;
            notSm: `(min-width: calc(${string} + 1px))`;
            notMd: `(min-width: calc(${string} + 1px))`;
            notLg: `(min-width: calc(${string} + 1px))`;
            notXl: `(min-width: calc(${string} + 1px))`;
            notXxl: `(min-width: calc(${string} + 1px ))`;
            minSm: `(min-width: calc(${string} + 1px))`;
            minMd: `(min-width: calc(${string} + 1px))`;
            minLg: `(min-width: calc(${string} + 1px))`;
            minXl: `(min-width: calc(${string} + 1px))`;
            minXxl: `(min-width: calc(${string} + 1px ))`;
            maxSm: `(max-width: calc(${string} - 1px))`;
            maxMd: `(max-width: calc(${string} - 1px))`;
            maxLg: `(max-width: calc(${string} - 1px))`;
            maxXl: `(max-width: calc(${string} - 1px))`;
            maxXxl: `(max-width: ${string})`;
            reducedMotion: "(prefers-reduced-motion)";
            hover: "(any-hover: hover)";
            dark: "(prefers-color-scheme: dark)";
            light: "(prefers-color-scheme: light)";
        }> & {
            children?: React.ReactNode;
            css?: WPDS.CSS | undefined;
        }): JSX.Element;
        displayName: string;
    };
    Value: React.ForwardRefExoticComponent<_stitches_react_types_styled_component.TransformProps<{
        isDisabled?: boolean | "true" | undefined;
    }, {
        sm: `(max-width: calc(${string}))`;
        md: `(min-width: ${string}) and (max-width: calc(${string}))`;
        lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
        xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
        xxl: `(min-width: ${string}) and (max-width: ${string})`;
        notSm: `(min-width: calc(${string} + 1px))`;
        notMd: `(min-width: calc(${string} + 1px))`;
        notLg: `(min-width: calc(${string} + 1px))`;
        notXl: `(min-width: calc(${string} + 1px))`;
        notXxl: `(min-width: calc(${string} + 1px ))`;
        minSm: `(min-width: calc(${string} + 1px))`;
        minMd: `(min-width: calc(${string} + 1px))`;
        minLg: `(min-width: calc(${string} + 1px))`;
        minXl: `(min-width: calc(${string} + 1px))`;
        minXxl: `(min-width: calc(${string} + 1px ))`;
        maxSm: `(max-width: calc(${string} - 1px))`;
        maxMd: `(max-width: calc(${string} - 1px))`;
        maxLg: `(max-width: calc(${string} - 1px))`;
        maxXl: `(max-width: calc(${string} - 1px))`;
        maxXxl: `(max-width: ${string})`;
        reducedMotion: "(prefers-reduced-motion)";
        hover: "(any-hover: hover)";
        dark: "(prefers-color-scheme: dark)";
        light: "(prefers-color-scheme: light)";
    }> & SelectPrimitive.SelectValueProps & {
        children?: React.ReactNode;
        css?: WPDS.CSS | undefined;
        placeholder?: string | undefined;
    } & React.RefAttributes<HTMLDivElement>>;
};

declare const TextInputLabel: _stitches_react_types_styled_component.StyledComponent<React.ForwardRefExoticComponent<_washingtonpost_wpds_input_label.InputLabelProps & React.RefAttributes<HTMLSpanElement>>, {
    isFloating?: boolean | "true" | undefined;
    isDisabled?: boolean | "true" | undefined;
}, {
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, _stitches_react_types_css_util.CSS<{
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        primary: string;
        secondary: string;
        cta: string;
        disabled: string;
        accessible: string;
        subtle: string;
        faint: string;
        error: string;
        success: string;
        warning: string;
        signal: string;
        onPrimary: string;
        onSecondary: string;
        onCta: string;
        onDisabled: string;
        onMessage: string;
        "alpha25-static": string;
        "alpha50-static": string;
        "gray0-static": string;
        "gray20-static": string;
        "gray40-static": string;
        "gray60-static": string;
        "gray80-static": string;
        "gray100-static": string;
        "gray200-static": string;
        "gray300-static": string;
        "gray400-static": string;
        "gray500-static": string;
        "gray600-static": string;
        "gray700-static": string;
        "blue40-static": string;
        "blue60-static": string;
        "blue80-static": string;
        "blue100-static": string;
        "blue200-static": string;
        "blue300-static": string;
        "blue400-static": string;
        "blue500-static": string;
        "blue600-static": string;
        "red40-static": string;
        "red60-static": string;
        "red80-static": string;
        "red100-static": string;
        "red200-static": string;
        "red300-static": string;
        "red400-static": string;
        "red500-static": string;
        "red600-static": string;
        "pink40-static": string;
        "pink60-static": string;
        "pink80-static": string;
        "pink100-static": string;
        "pink200-static": string;
        "pink300-static": string;
        "pink400-static": string;
        "pink500-static": string;
        "pink600-static": string;
        "purple40-static": string;
        "purple60-static": string;
        "purple80-static": string;
        "purple100-static": string;
        "purple200-static": string;
        "purple300-static": string;
        "purple400-static": string;
        "purple500-static": string;
        "purple600-static": string;
        "teal40-static": string;
        "teal60-static": string;
        "teal80-static": string;
        "teal100-static": string;
        "teal200-static": string;
        "teal300-static": string;
        "teal400-static": string;
        "teal500-static": string;
        "teal600-static": string;
        "orange40-static": string;
        "orange60-static": string;
        "orange80-static": string;
        "orange100-static": string;
        "orange200-static": string;
        "orange300-static": string;
        "orange400-static": string;
        "orange500-static": string;
        "orange600-static": string;
        "green40-static": string;
        "green60-static": string;
        "green80-static": string;
        "green100-static": string;
        "green200-static": string;
        "green300-static": string;
        "green400-static": string;
        "green500-static": string;
        "green600-static": string;
        "gold40-static": string;
        "gold60-static": string;
        "gold80-static": string;
        "gold100-static": string;
        "gold200-static": string;
        "gold300-static": string;
        "gold400-static": string;
        "gold500-static": string;
        "gold600-static": string;
        "yellow100-static": string;
        "yellow600-static": string;
        "mustard40-static": string;
        "mustard60-static": string;
        "mustard80-static": string;
        "mustard100-static": string;
        "mustard200-static": string;
        "mustard300-static": string;
        "mustard400-static": string;
        "mustard500-static": string;
        "mustard600-static": string;
        alpha25: string;
        alpha50: string;
        gray0: string;
        gray20: string;
        gray40: string;
        gray60: string;
        gray80: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        blue40: string;
        blue60: string;
        blue80: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        red40: string;
        red60: string;
        red80: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        pink40: string;
        pink60: string;
        pink80: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        purple40: string;
        purple60: string;
        purple80: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        teal40: string;
        teal60: string;
        teal80: string;
        teal100: string;
        teal200: string;
        teal300: string;
        teal400: string;
        teal500: string;
        teal600: string;
        orange40: string;
        orange60: string;
        orange80: string;
        orange100: string;
        orange200: string;
        orange300: string;
        orange400: string;
        orange500: string;
        orange600: string;
        green40: string;
        green60: string;
        green80: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        gold40: string;
        gold60: string;
        gold80: string;
        gold100: string;
        gold200: string;
        gold300: string;
        gold400: string;
        gold500: string;
        gold600: string;
        yellow100: string;
        yellow600: string;
        mustard40: string;
        mustard60: string;
        mustard80: string;
        mustard100: string;
        mustard200: string;
        mustard300: string;
        mustard400: string;
        mustard500: string;
        mustard600: string;
    };
    sizes: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
        "087": string;
    };
    space: {
        "100": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "025": string;
        "050": string;
        "075": string;
    };
    radii: {
        "100": string;
        "125": string;
        "150": string;
        "012": string;
        "025": string;
        "050": string;
        "075": string;
        round: string;
    };
    fonts: {
        headline: string;
        subhead: string;
        body: string;
        meta: string;
        magazine: string;
    };
    fontSizes: {
        "100": string;
        "112": string;
        "125": string;
        "150": string;
        "175": string;
        "200": string;
        "225": string;
        "250": string;
        "275": string;
        "300": string;
        "350": string;
        "400": string;
        "450": string;
        "500": string;
        "075": string;
        "087": string;
    };
    fontWeights: {
        light: number;
        regular: number;
        bold: number;
        ultra: number;
    };
    shadows: {
        "50": string;
        "100": string;
        "200": string;
        "300": string;
        "400": string;
        "500": string;
    };
    zIndices: {
        offer: number;
        shell: number;
        ads: number;
        page: number;
    };
    lineHeights: {
        headline: string;
        body: string;
        meta: string;
        subhead: string;
        "100": number;
        "110": number;
        "125": number;
        "150": number;
        "160": number;
        "175": number;
        "200": number;
        "240": number;
    };
    transitions: {
        allFast: string;
        fast: string;
        normal: string;
        inOut: string;
    };
    borderStyles: unknown;
    borderWidths: unknown;
    letterSpacings: unknown;
}, _stitches_react_types_config.DefaultThemeMap, {
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {};
        paddingRight: {};
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {};
        paddingBottom: {};
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {};
        marginBottom: {};
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {};
        marginRight: {};
    };
    size: (value: {
        readonly [$$PropertyValue]: "height" | "width";
    }) => {
        width: {};
        height: {};
    };
}>>;
declare type SelectLabelVariants = WPDS.VariantProps<typeof TextInputLabel>;
declare type SelectLabelProps = SelectLabelVariants & {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS;
};
declare const SelectLabel: {
    ({ children, ...props }: SelectLabelProps): JSX.Element;
    displayName: string;
};

declare const SelectTrigger: React.ForwardRefExoticComponent<SelectPrimitive.SelectTriggerProps & _stitches_react_types_styled_component.TransformProps<{
    success?: boolean | "true" | undefined;
    error?: boolean | "true" | undefined;
    isInvalid?: boolean | "true" | undefined;
    isDisabled?: boolean | "true" | undefined;
}, {
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}> & {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS | undefined;
} & React.RefAttributes<HTMLButtonElement>>;

declare const SelectValue: React.ForwardRefExoticComponent<_stitches_react_types_styled_component.TransformProps<{
    isDisabled?: boolean | "true" | undefined;
}, {
    sm: `(max-width: calc(${string}))`;
    md: `(min-width: ${string}) and (max-width: calc(${string}))`;
    lg: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xl: `(min-width: ${string}) and (max-width: calc(${string}))`;
    xxl: `(min-width: ${string}) and (max-width: ${string})`;
    notSm: `(min-width: calc(${string} + 1px))`;
    notMd: `(min-width: calc(${string} + 1px))`;
    notLg: `(min-width: calc(${string} + 1px))`;
    notXl: `(min-width: calc(${string} + 1px))`;
    notXxl: `(min-width: calc(${string} + 1px ))`;
    minSm: `(min-width: calc(${string} + 1px))`;
    minMd: `(min-width: calc(${string} + 1px))`;
    minLg: `(min-width: calc(${string} + 1px))`;
    minXl: `(min-width: calc(${string} + 1px))`;
    minXxl: `(min-width: calc(${string} + 1px ))`;
    maxSm: `(max-width: calc(${string} - 1px))`;
    maxMd: `(max-width: calc(${string} - 1px))`;
    maxLg: `(max-width: calc(${string} - 1px))`;
    maxXl: `(max-width: calc(${string} - 1px))`;
    maxXxl: `(max-width: ${string})`;
    reducedMotion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}> & SelectPrimitive.SelectValueProps & {
    /** Used to insert select elements into the root component*/
    children?: React.ReactNode;
    /** Overrides for the input text styles. Padding overrides affect the input container and  */
    css?: WPDS.CSS | undefined;
    placeholder?: string | undefined;
} & React.RefAttributes<HTMLDivElement>>;

export { Select, SelectContent, SelectContentProps, SelectContext, SelectGroup, SelectGroupProps, SelectItem, SelectItemProps, SelectLabel, SelectRoot, SelectRootProps, SelectTrigger, SelectValue };
